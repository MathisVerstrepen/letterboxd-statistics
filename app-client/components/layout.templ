package components

import( 
    "os"
    "fmt"
)

func environment() string {
    env := os.Getenv("ENV")
	return env
}

templ layout(contents templ.Component, title string, renderTime float64) {
	<!DOCTYPE html>
	<html lang="en">
		<head>
			<meta charset="UTF-8"/>
			<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
            <meta name="description" content="Letterboxd popular movies statistics panel"/>
            <meta name="author" content="Mathis Verstrepen"/>

			<link rel="icon" type="image/png" sizes="32x32" href="/assets/favicon/favicon-32x32.png"/>
			<link rel="icon" type="image/png" sizes="16x16" href="/assets/favicon/favicon-16x16.png"/>
			<link rel="manifest" href="/assets/favicon/site.webmanifest"/>
			<link rel="mask-icon" href="/assets/favicon/safari-pinned-tab.svg" color="#5bbad5"/>
			<meta name="msapplication-TileColor" content="#da532c"/>
			<meta name="theme-color" content="#ffffff"/>

			<link rel="stylesheet" href="/assets/css/output.css"/>
            if (environment() != "prod") {
            // during development, use the raw.githack.com link to get the latest version of the CSS fast for convenience
            <link rel="stylesheet" type="text/css" href="https://raw.githack.com/MathisVerstrepen/templ_ui_library/main/assets/css/output.css">
            } else {
            <link rel="stylesheet" type="text/css" href="/assets/css/templ_ui_library.css">
            }

			<title>{ title }</title>

            <script src="/assets/htmx.min.js"></script>

			if (environment() != "prod") {
            <script>
                const socket = new WebSocket(`ws://${window.location.hostname}:9456/ws`);

                // if page leave is detected, stop trying to reconnect
                window.addEventListener("beforeunload", () => {
                    socket.close();
                });

                socket.addEventListener("close", (event) => {
                    // if the connection was closed normally, don't try to reconnect
                    if (event.code === 1000) {
                        return;
                    }

                    console.warn("Connection closed, trying to reconnect...");
                    let interval = setInterval(() => {
                        fetch("/ping").then((response) => {
                            if (response.ok) {
                                console.log("Connection closed, but ping fetched successfully!");
                                clearInterval(interval);
                                setTimeout(() => {
                                    window.location.reload();
                                }, 100);
                            }
                        });
                    }, 200);
                });
            </script>
			}
		</head>

		<body>
            @contents
            @Svg()

            <footer class="z-50 absolute text-center text-white text-xs p-4 bottom-0 right-1/2 translate-x-1/2 opacity-30">
                <p>Served in { fmt.Sprintf("%.3f", renderTime) } sec</p>
            </footer>
		</body>
	</html>
}

templ Root(contents templ.Component, title string, renderTime float64) {
	@layout(contents, title, renderTime)
}
